# archivo: statistics_calculator.py
def calcular_promedio(datos):
 # Implementar lógica para calcular el promedio
 pass
def calcular_mediana(datos):
 # Implementar lógica para calcular la mediana
 pass
def calcular_moda(datos):
 # Implementar lógica para calcular la moda
 pass
# Agrega más funciones según sea necesario
if __name__ == "__main__":
 # Puedes agregar código de ejemplo aquí para probar las funciones

 # Leer datos con un input y verificar que sean enteros
 datos = [3,2,8,3,8,9,3]
 promedio = calcular_promedio(datos)
 print(f"El promedio de los datos es: {promedio}")
 promedio = calcular_promedio(datos)
 print(f"El promedio de los datos es: {promedio}")
 promedio = calcular_promedio(datos)
 print(f"El promedio de los datos es: {promedio}")

def calcular_promedio(datos):
 # Implementar lógica para calcular el promedio
 pass
def calcular_mediana(datos):
 # Implementar lógica para calcular la mediana
 pass
def calcular_moda(datos):
 # Implementar lógica para calcular la moda
 pass
# Agrega más funciones según sea necesario
if __name__ == "__main__":

 # Leer datos con un input y verificar que sean enteros

cadena_datos = input("Ingrese un conjunto de valores separados por coma: ")
 datos = cadena_datos.split(",")
 for i in range (0, len(datos)):
 datos[i] = datos[i].strip()
 assert datos[i].isnumeric(), f"ERROR: '{datos[i]}' no es un número"
 try:
 datos[i] = int(datos[i])
 except:
 print(f"ERROR: {datos[i]} no se puede convertir a entero")
 # Los datos están listos para operar
 print(datos)
 promedio = calcular_promedio(datos)
 print(f"El promedio de los datos es: {promedio}")
 mediana = calcular_mediana(datos)
 print(f"La mediana de los datos es: {mediana}")
 moda = calcular_moda(datos)
 print(f"La moda de los datos es: {moda}")

# Nos cambiamos al branch
git switch leer-datos
# Agregamos los cambios que queremos subir
git add ./statistics_calculator.py
# Empaquetamos y colocamos un mensaje que explique los cambios
git commit -m "Lee los datos del usuario"
# Subimos los cambios
git push

def calcular_promedio(datos):
 if type(datos) is list and len(datos) > 0:
 return sum(datos) / len(datos)
 else:
 return 0
